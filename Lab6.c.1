#include <stdio.h>
# include <stdbool.h>

void printBoard (int board [], int playerA, int playerB) {
    int i =0;
	
	//Helps display the game board and properly spaces out the arrays
    for (i=0; i<9; i++){
        if (board [i] == i+1){
            printf (" %d", board[i]);
        }
        if (board [i] == playerA){
            printf (" %c", 'A');
        }
        if (board [i] == playerB){
            printf(" %c", 'B');
        }
        if (i == 2 || i==5|| i==8){
            printf("\n");
        }
    }
    printf("\n");

}

int requestValidInput(int board [], int playerA, int playerB){
    bool valid  = false;
    int position = 0;
    while (valid == false){
		// Checks if the number is within the acceptable range and if the position is free
        scanf(" %d", &position);
        if (position>9 || position<1){
            printf("Invalid input, please try again.\n");
        }
        else if (board [position-1] == playerA || board [position -1] == playerB){
            printf ("That position has already been played, please try again.\n");
        }
        else {
            valid  = true;
            return position;
        }
    }
    return 0;
}

int checkForWinner ( int state[], int playerA, int playerB){
    int player = 0;
    int counter = 0;
    int draw = playerA + playerB;
	
	
	//Checks all the possible combinations, if no one wins, or ther is no draw then returns 0
	//Row 1
    if (state [0] == state [1] && state [1] == state [2]){
        player = state [0];
        return player;
    }
	
	//Row 2
    else if (state [3] == state [4] && state [4] == state [5]){
        player = state [3];
        return player;
    }
	
	//Row 3
    else if (state [6] == state [7] && state [7] == state [8]){
        player = state [6];
        return player;
    }
	
	//Diagonal 1
    else if (state[0] == state [4] && state [4] == state [8]){
        player = state [0];
        return player;
    }
	
	//Diagonal 2
    else if (state [2] == state [4] && state [4] == state [6]){
        player = state [2];
        return player;
    }
	
	//Column 1
    else if (state [0] == state [3] && state [3] == state [6]){
        player = state [0];
        return player;
    }
	
	//Column 2
    else if (state [1] == state [4] && state [4] == state [7]){
        player = state [1];
        return player;
    }
	
	//Column 3
    else if (state [2] == state [5] && state [5] == state [8]){
        player = state [2];
        return player;
    }
    
    int i = 0;
    for  (i=0; i<9; i++){
        if (state [i] == playerA || state [i] == playerB){
            counter ++;
        }
    }
    
    if (counter  == 9){
        return draw;
    }
    
    return 0;
}

int main(void){
    int board[9] = {1,2,3,4,5,6,7,8,9};
    int A = 11; //Player A
    int B = 12; //Player B
    int j = A; 
    int input = 0;
    int input2  = 0;
    bool gameOver = false;
    
    while (gameOver == false){
        
		// prints the current state of the board
        printf("The current state of the Tic-tac-toe Board:\n\n");
        printBoard(board, A, B);
    
		//Determines who is playing
        if (j==A){
            printf("It is Player A's turn.\n");
        }
        if (j==B){
            printf ("It is Player B's turn.\n");
        }
    
        printf("Please enter a valid position to play.\n");
        input  = requestValidInput(board, A, B);
        
    
        board [input - 1] = j;
		
		//Changes the player
        if (j == A){
            j=B;
        }
        else if  (j==B){
            j = A;
        }
    
		//Checks if there is a winner
        input2 = checkForWinner (board, A,B);
    
        if (input2 == A || input2 == B || input2 == A+B){
            gameOver = true;
        }
        else if (input2 ==0){
            gameOver = false;
        }
    }
    
	
	// Outputs the final winner or if its a draw
    if (input2 == A){
        printf("Player A wins!\n\n");
    }
    else if (input2 == B){
        printf ("Player B wins!\n\n");
    }
    else if (input2 == A + B){
        printf("It's a draw!\n\n");
    }
    
	//Print final state
    printBoard (board, A, B); 
    return 0;
}
